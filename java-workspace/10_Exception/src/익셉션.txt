컴퓨터가 예기치 못한 상황이 발생했고,
결과를 개발자한테 전달하고 예기치 못한 상황에 대해
해결해달라는 메세지를 전달

검색하는 단축키 : ctrl + f  -> 컴퓨터에서 어디든지 사용 가능

단축키 : Ctrl + Alt + T 는 if 나 while try/catch와 같이
           감싼 후 작성해야하는 코드를 나중에 인지했을 때
           감싸고자하는 코드에 자동으로 원하는 속성으로 감싸기를 진행


Exception in thread "main"
java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5

 예외 발생 구문을 try-catch로 처리 (예외 처리)

 - try-with-resource :
 Java7 에서 추가된 기능 자동으로 자원을 해제해주는 기능
 File FileWriter FileReader InputStream OutputStream BufferdRead
 위와 같이 close()를 작성해야하는 객체들을
 자동으로 닫아주기 때문에 close() 생략할 수 잇음

 try 블록이 종료되면 자동으로 try 내에 있는 객체들만 종료

 사용법) try() 소괄호 안에 코드 작성하는 기법
 try(코드1;코드2;코드3; ...) {

 }

 예를 들어)
     try(Scanner sc = new Scanner(System.in)){
            String name = sc.nextLine();
     }
     try 내 모든 구문이 실행되고 try 를 나와야할 시점에 Scanner가 알아서 close 됨
     try() 내에 코드를 2가지 이상 작성할 경우 ;으로 구분지어줌
     try(
     Scanner sc = new Scanner(System.in);
     File f = new File("파일위치/파일명");
     {

     }

 - try{} : 예외가 발생할 수 있을 것 같은 코드들을 시도하는 구문
              (1) try ~ catch
              (2) try ~ catch ~ catch ~ catch
              (3) try ~ catch ~ catch ~ ... ~ finally
              (4) try ~ catch ~ finally
              (5) try ~ finally

 - catch(예외){} :
           try안에 작성한 코드들을 실행하던 도중
           문제가 발생했고, 발생한 문제가 예상했던 문제와 같으면
           내가생각한 문제가 맞아! catch(잡아서)
           catch {} 중괄호 안에 작성된 구문 수행
           -> 발생된 예외를 다른 방식으로 처리했기 때문에
               프로그램이 멈추지 않고 정상적으로 수행
           catch는 1개가 아니라 100 1000개 이상 작성 가능

 문제가 발생하는데 어떤 문제인지 예상이 되지 않을 경우
 catch(Exception e){} 로 작성하면 모든 문제는 잡힘

 -finally{} : catch에 관계없이 마지막에 무조건적으로 실행하는 코드를 작성
              finally는 필수로 작성하는 것이 아니라 필요하다면 선택적으로 작성
              만약 finally 작성할 경우
                    (1) try ~ catch ~ finally
                    (2) try ~ finally
              주로 사용하는 경우


               e.printStackTrace();
                          /*
                          e= exception or error
                          print : 출력하다
                          Stack : 메모리에서 stack 영역에 존재하는
                          Trace : 것을 추적하다

                          호출한 기능 순서대로 타고 들어가서 발생한 예외(문제)들을 모두 추적해서
                          개발자가 눈으로 확인할 수 있도록 출력

              - throws:
                       예외를 기능에서 처리하지 않고 호출한 곳으로 문제를 전달만 하는 기능
                       예외가 발생할 수 있는 메서드(기능)에서 최초로 호출한 곳으로
                       문제가 생겼음을 던져주기 위해 사용
                       throws는 메서드 기능에서 문제가 생겼을 때 책임을 넘기는 기능

                       문제를 매끄럽게 해결하기 위해서는
                       최초로 문제가 생길만한 기능에는 try-catch를 이용하기
                       코드가 길어질 경우 throws 로 문제를 전달하기만 하기

                       사용법:
                             public void 메서드 명칭 throws Exception(){
                                    기능설정
                             }
                             public return 메서드 명칭 throws Exception(){
                                    기능설정
                             }

               throw new RuntimeException(e);
                           //throw 발생한 예외를 현재 위치에서 보여줌
